% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/operators.R
\name{\%.IF.\%}
\alias{\%.IF.\%}
\title{If Modifier}
\usage{
x \%.IF.\% condition
}
\arguments{
\item{x}{A R object to return if \code{condition} evaluates to \code{TRUE}.}

\item{condition}{A length-1 \code{logical} vector.}
}
\value{
If \code{condition} evaluates to \code{TRUE}, returns \code{x}; \code{NULL} otherwise.
}
\description{
This infix operator is inspired by Ruby's \code{if} modifier.
}
\details{
With the \verb{\%.IF.\%} operator, the \code{x} value is returned if the \code{condition}
evaluates to \code{TRUE}, and \code{NULL} otherwise.

No checks on \code{condition} are performed; they are left to the \code{if} statement.
}
\note{
The \verb{\%.IF.\%} has low precedence value, so you may have to use parenthesis to
get the behavior you are looking for. See examples.
}
\examples{
number <- 5
value <- 10
(value \%.IF.\% TRUE) # 10

# This is likely to give surprising results, as you may expect that number > 20
# is FALSE and thus NULL should be returned.
# But in reality, because of operator precedence, only `number` is passed to
# `\%.IF.\%`, which evaluates to `TRUE` (since it is greater than 0).
# The order of operation is
# 1. value \%.IF.\% number, which returns `value`.
# 2. ((value \%.IF.\% number) > 20), which is `value` > 20, which is `FALSE`
(value \%.IF.\% number > 20) # FALSE

# This is more likely what was intended
(value \%.IF.\% (number > 20)) # NULL
(value \%.IF.\% (number > 1)) # 10

}
